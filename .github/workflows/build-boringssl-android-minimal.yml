name: Build BoringSSL Android

on:
  workflow_dispatch:
    inputs:
      boringssl_ref:
        description: 'BoringSSL reference (tag/branch/commit)'
        required: true
        default: '0.20250701.0'
        type: string
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-boringssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout BoringSSL
      uses: actions/checkout@v4
      with:
        repository: google/boringssl
        ref: ${{ inputs.boringssl_ref || '0.20250701.0' }}
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r28b
        add-to-path: false
    
    - name: Set NDK environment
      run: |
        echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build golang-go bc
    
    - name: Generate source files first
      run: |
        # Create the gen directory structure
        mkdir -p src/gen
        
        # Run Go to generate the source files
        cd src
        go run util/all_tests.go -build_dir ../build/temp
        cd ..
        
        # Generate the sources.json and other build files
        python3 util/generate_build_files.py sources.json
        
        # Now generate Android-specific build files
        python3 util/generate_build_files.py android
    
    - name: Create build directories
      run: |
        mkdir -p build/armeabi-v7a
        mkdir -p build/arm64-v8a
        mkdir -p build/x86
        mkdir -p build/x86_64
        mkdir -p output
    
    - name: Build for armeabi-v7a
      run: |
        cd build/armeabi-v7a
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DANDROID_ARM_NEON=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_armeabi-v7a.a
    
    - name: Build for arm64-v8a
      run: |
        cd build/arm64-v8a
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_arm64-v8a.a
    
    - name: Build for x86
      run: |
        cd build/x86
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=x86 \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_x86.a
    
    - name: Build for x86_64
      run: |
        cd build/x86_64
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=x86_64 \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_x86_64.a
    
    - name: Strip libraries and check sizes
      run: |
        cd output
        for lib in *.a; do
          echo "Original size of $lib:"
          ls -lh $lib
          $NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip $lib
          echo "Stripped size of $lib:"
          ls -lh $lib
          echo "Size in bytes: $(stat -c%s $lib)"
          size_mb=$(echo "scale=2; $(stat -c%s $lib)/1024/1024" | bc)
          echo "Size in MB: $size_mb"
          
          # Check if size is under 4MB
          size_bytes=$(stat -c%s $lib)
          if [ $size_bytes -gt 4194304 ]; then
            echo "WARNING: $lib is larger than 4MB!"
          else
            echo "âœ“ $lib is under 4MB limit"
          fi
          echo "---"
        done
    
    - name: Copy headers
      run: |
        mkdir -p output/include
        cp -r include/openssl output/include/
    
    - name: Create archive structure
      run: |
        cd output
        mkdir -p boringssl-android/{lib/{armeabi-v7a,arm64-v8a,x86,x86_64},include}
        cp libcrypto_armeabi-v7a.a boringssl-android/lib/armeabi-v7a/libcrypto.a
        cp libcrypto_arm64-v8a.a boringssl-android/lib/arm64-v8a/libcrypto.a
        cp libcrypto_x86.a boringssl-android/lib/x86/libcrypto.a
        cp libcrypto_x86_64.a boringssl-android/lib/x86_64/libcrypto.a
        cp -r include/* boringssl-android/include/
        
        # Create a simple CMakeLists.txt for easy integration
        cat > boringssl-android/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.10)
        project(BoringSSL)
        
        add_library(crypto STATIC IMPORTED)
        set_target_properties(crypto PROPERTIES
            IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/lib/${ANDROID_ABI}/libcrypto.a
            INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/include
        )
        
        # For curl integration
        add_library(BoringSSL::Crypto ALIAS crypto)
        EOF
        
        # Create README with integration instructions
        cat > boringssl-android/README.md << 'EOF'
        # BoringSSL Android Libraries
        
        Built with NDK r28b, optimized for size with -O2 -flto flags.
        
        ## Usage with CMake:
        ```cmake
        add_subdirectory(path/to/boringssl-android)
        target_link_libraries(your_target BoringSSL::Crypto)
        ```
        
        ## Architecture Support:
        - armeabi-v7a
        - arm64-v8a  
        - x86
        - x86_64
        
        ## Integration with curl:
        Use OPENSSL_ROOT_DIR pointing to this directory when configuring curl.
        EOF
        
        tar -czf boringssl-android.tar.gz boringssl-android/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boringssl-android-${{ github.run_number }}
        path: |
          output/boringssl-android.tar.gz
          output/libcrypto_*.a
        retention-days: 30
    
    - name: Display final summary
      run: |
        echo "=== BoringSSL Android Build Summary ==="
        echo "Reference: ${{ inputs.boringssl_ref || '0.20250701.0' }}"
        echo "NDK Version: r28b"
        echo "Optimization: -O2 with LTO"
        echo "Run Number: ${{ github.run_number }}"
        echo ""
        echo "Library sizes:"
        cd output
        total_size=0
        for lib in libcrypto_*.a; do
          size_bytes=$(stat -c%s $lib)
          size_mb=$(echo "scale=2; $size_bytes/1024/1024" | bc)
          total_size=$((total_size + size_bytes))
          echo "$lib: ${size_mb}MB (${size_bytes} bytes)"
        done
        total_mb=$(echo "scale=2; $total_size/1024/1024" | bc)
        echo ""
        echo "Total size: ${total_mb}MB"
        echo "Archive ready for curl integration!"

name: Build Minimal BoringSSL for Android

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a, x86, x86_64]

    steps:
      - name: Checkout BoringSSL
        uses: actions/checkout@v4
        with:
          repository: google/boringssl
          ref: 0.20250701.0
          path: boringssl
          submodules: recursive

      - name: Setup Android NDK
        id: setup-ndk
        uses: actions/setup-ndk@v1
        with:
          ndk-version: r28b
          add-to-path: false

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build python3 python3-pip
          python3 -m pip install --upgrade pip

      - name: Apply Minimal Configuration
        run: |
          cd boringssl

          # 1. Patch Android certificate path
          X509_DEF_FILE=$(find . -type f -name x509_def.cc | head -n1)
          if [ -n "$X509_DEF_FILE" ]; then
            sed -i 's|return X509_CERT_DIR;|return "/system/etc/security/cacerts";|' "$X509_DEF_FILE"
          fi

          # 2. Backup original CMakeLists
          cp CMakeLists.txt CMakeLists.txt.orig

          # 3. Remove DTLS and test/tool sources
          for file in d1_both.cc d1_lib.cc d1_pkt.cc d1_srtp.cc; do
            sed -i "/$file/d" CMakeLists.txt
          done
          sed -i '/_test\.cc/d' CMakeLists.txt
          sed -i '/test_.*\.cc/d' CMakeLists.txt

          # 4. Append minimal build configuration
          echo '# === Minimal Build Configuration ===' >> CMakeLists.txt
          echo 'option(BUILD_TESTING "Build tests" OFF)' >> CMakeLists.txt
          echo 'option(BUILD_TOOLS "Build tools" OFF)' >> CMakeLists.txt
          echo 'set(BUILD_TESTING OFF CACHE BOOL "" FORCE)' >> CMakeLists.txt
          echo 'set(BUILD_TOOLS OFF CACHE BOOL "" FORCE)' >> CMakeLists.txt
          echo 'add_definitions(-DOPENSSL_SMALL_CODE)' >> CMakeLists.txt
          echo 'add_definitions(-DOPENSSL_NO_LEGACY_ALGORITHMS)' >> CMakeLists.txt
          echo 'add_definitions(-DOPENSSL_NO_WEAK_SSL_CIPHERS)' >> CMakeLists.txt
          echo 'add_definitions(-DOPENSSL_NO_DTLS)' >> CMakeLists.txt
          echo 'add_definitions(-DOPENSSL_NO_PSK)' >> CMakeLists.txt
          echo 'if(NOT BUILD_TESTING AND NOT BUILD_TOOLS)' >> CMakeLists.txt
          echo '  message(STATUS "Minimal build complete â€” crypto & ssl only")' >> CMakeLists.txt
          echo '  return()' >> CMakeLists.txt
          echo 'endif()' >> CMakeLists.txt

          # 5. Stub out test subdirectories
          echo '# Tests disabled for minimal build' > ssl/test/CMakeLists.txt
          echo 'return()'                      >> ssl/test/CMakeLists.txt
          echo '# Tests disabled for minimal build' > crypto/test/CMakeLists.txt
          echo 'return()'                         >> crypto/test/CMakeLists.txt


      - name: Set Build Variables
        run: |
          NDK_PATH="${{ steps.setup-ndk.outputs.ndk-path }}"
          echo "NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV

          case "${{ matrix.arch }}" in
            armeabi-v7a)
              echo "ANDROID_ABI=armeabi-v7a" >> $GITHUB_ENV
              echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
              ARCH_FLAGS="-mfpu=neon"
              ;;
            arm64-v8a)
              echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
              echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
              ARCH_FLAGS="-march=armv8-a+crypto"
              ;;
            x86)
              echo "ANDROID_ABI=x86" >> $GITHUB_ENV
              echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
              ARCH_FLAGS="-msse4.2 -maes"
              ;;
            x86_64)
              echo "ANDROID_ABI=x86_64" >> $GITHUB_ENV
              echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
              ARCH_FLAGS="-msse4.2 -maes -mavx"
              ;;
          esac

          echo "ARCH_FLAGS=$ARCH_FLAGS" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV

      - name: Build BoringSSL
        run: |
          mkdir -p boringssl/build-${{ matrix.arch }}
          cd boringssl/build-${{ matrix.arch }}
          cmake .. \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE" \
            -DANDROID_ABI="$ANDROID_ABI" \
            -DANDROID_PLATFORM="$ANDROID_PLATFORM" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden $ARCH_FLAGS" \
            -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden $ARCH_FLAGS -fno-rtti -fno-exceptions" \
            -DCMAKE_EXE_LINKER_FLAGS="-s -Wl,--gc-sections" \
            -DCMAKE_SHARED_LINKER_FLAGS="-s -Wl,--gc-sections" \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DBUILD_TESTING=OFF \
            -DBUILD_TOOLS=OFF
          ninja crypto ssl

      - name: Strip Libraries
        run: |
          cd boringssl/build-${{ matrix.arch }}
          TOOLCHAIN_BIN="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin"
          case "$ANDROID_ABI" in
            arm64-v8a) STRIP="$TOOLCHAIN_BIN/aarch64-linux-android-strip" ;;
            armeabi-v7a) STRIP="$TOOLCHAIN_BIN/arm-linux-androideabi-strip" ;;
            x86_64) STRIP="$TOOLCHAIN_BIN/x86_64-linux-android-strip" ;;
            x86) STRIP="$TOOLCHAIN_BIN/i686-linux-android-strip" ;;
          esac
          if [ -x "$STRIP" ]; then
            "$STRIP" --strip-all ssl/libssl.a crypto/libcrypto.a
          else
            strip --strip-all ssl/libssl.a crypto/libcrypto.a
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boringssl-min-${{ matrix.arch }}
          path: |
            boringssl/build-${{ matrix.arch }}/ssl/libssl.a
            boringssl/build-${{ matrix.arch }}/crypto/libcrypto.a

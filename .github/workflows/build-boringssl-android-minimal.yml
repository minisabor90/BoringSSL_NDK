# .github/workflows/build-boringssl-android-minimal.yml
name: Build Drop-In BoringSSL for Android (HTTP/3 Optimized)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a, x86, x86_64]

    steps:
      - name: Checkout BoringSSL 0.20250701.0
        uses: actions/checkout@v4
        with:
          repository: google/boringssl
          ref: 0.20250701.0
          path: boringssl
          submodules: recursive

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: ndk
        with:
          ndk-version: r28b
          add-to-path: false

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build python3 python3-pip zip
          python3 -m pip install --upgrade pip

      - name: Apply minimal CMake patch
        run: |
          cd boringssl
          cp CMakeLists.txt CMakeLists.txt.bak
          sed -i '/d1_.*\.cc/d' CMakeLists.txt
          sed -i '/_test\.cc/d' CMakeLists.txt
          sed -i '/test_.*\.cc/d' CMakeLists.txt
          cat << 'EOF' >> CMakeLists.txt
# === MINIMAL BUILD CONFIGURATION ===
option(BUILD_TESTING "Build tests" OFF)
option(BUILD_TOOLS "Build tools" OFF)
add_definitions(-DOPENSSL_SMALL_CODE)
add_definitions(-DOPENSSL_NO_LEGACY_ALGORITHMS)
add_definitions(-DOPENSSL_NO_WEAK_SSL_CIPHERS)
add_definitions(-DOPENSSL_NO_DTLS)
add_definitions(-DOPENSSL_NO_PSK)
EOF

      - name: Set environment variables
        run: |
          echo "NDK_PATH=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          case "${{ matrix.arch }}" in
            armeabi-v7a)
              ABI=armeabi-v7a; FLAGS="-mfpu=neon";;
            arm64-v8a)
              ABI=arm64-v8a; FLAGS="-march=armv8-a+crypto";;
            x86)
              ABI=x86; FLAGS="-msse4.2 -maes";;
            x86_64)
              ABI=x86_64; FLAGS="-msse4.2 -maes -mavx";;
          esac
          echo "ANDROID_ABI=$ABI" >> $GITHUB_ENV
          echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
          echo "ARCH_FLAGS=$FLAGS" >> $GITHUB_ENV
          echo "TOOLCHAIN=$NDK_PATH/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV

      - name: Build shared libraries
        run: |
          cd boringssl
          mkdir -p build-${{ matrix.arch }}
          cd build-${{ matrix.arch }}
          COMMON="-Os -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -fvisibility-inlines-hidden"
          COMMON="$COMMON -DOPENSSL_SMALL_CODE -DOPENSSL_NO_LEGACY_ALGORITHMS -DOPENSSL_NO_WEAK_SSL_CIPHERS -DOPENSSL_NO_DTLS -DOPENSSL_NO_PSK"
          COMMON="$COMMON -flto=thin -fwhole-program-vtables -g0 $ARCH_FLAGS"
          [ "${{ matrix.arch }}" = "armeabi-v7a" ] && COMMON="$COMMON -DOPENSSL_ARM_NEON"
          [ "${{ matrix.arch }}" = "arm64-v8a" ] && COMMON="$COMMON -DOPENSSL_AARCH64_CRYPTO"
          cmake .. -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN" \
            -DANDROID_ABI="$ANDROID_ABI" \
            -DANDROID_PLATFORM="$ANDROID_PLATFORM" \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DBUILD_SHARED_LIBS=ON \
            -DBUILD_TESTING=OFF \
            -DBUILD_TOOLS=OFF \
            -DCMAKE_C_FLAGS="$COMMON" \
            -DCMAKE_CXX_FLAGS="$COMMON -fno-rtti -fno-exceptions" \
            -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto=thin"
          ninja crypto ssl

      - name: Strip shared libraries
        run: |
          cd boringssl/build-${{ matrix.arch }}
          case "${{ matrix.arch }}" in
            arm64-v8a) STRIP="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-strip";;
            armeabi-v7a) STRIP="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/arm-linux-androideabi-strip";;
            x86_64) STRIP="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android-strip";;
            x86) STRIP="$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android-strip";;
          esac
          $STRIP --strip-unneeded libcrypto.so libssl.so

      - name: Package drop-in ZIP
        run: |
          cd boringssl
          mkdir -p dropin/jni/${{ matrix.arch }} dropin/include/openssl
          cp build-${{ matrix.arch }}/libcrypto.so dropin/jni/${{ matrix.arch }}/
          cp build-${{ matrix.arch }}/libssl.so    dropin/jni/${{ matrix.arch }}/
          cp include/openssl/*.h dropin/include/openssl/
          cd dropin
          zip -r boringssl-dropin-${{ matrix.arch }}.zip jni include

      - name: Upload drop-in artifact
        uses: actions/upload-artifact@v4
        with:
          name: boringssl-dropin-${{ matrix.arch }}
          path: boringssl/dropin/boringssl-dropin-${{ matrix.arch }}.zip

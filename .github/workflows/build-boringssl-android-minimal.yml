# GitHub Actions Workflow to build BoringSSL for Android
#
# This workflow checks out a specific tag of Google's BoringSSL,
# builds it for multiple Android architectures, and uploads the
# resulting static libraries as artifacts.
#
# Key Features:
# - Uses a matrix strategy to build for armeabi-v7a, arm64-v8a, x86, and x86_64.
# - Installs the Android NDK automatically.
# - Uses CMake with '-O2' optimization.
# - Disables tests and fuzzers to reduce library size.
# - Includes a step to verify that libcrypto_static.a is under 4MB.
# - Uploads the static libraries for each architecture as separate artifacts.

name: Build BoringSSL for Android

on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - main # Triggers on push to the main branch

jobs:
  build_boringssl:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      # We use a matrix to run the same set of steps for each target architecture.
      matrix:
        arch:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64

    steps:
      - name: Install Build Dependencies
        run: sudo apt-get update && sudo apt-get install -y ninja-build golang

      - name: Install Android NDK
        # Using a more current and maintained action to set up the NDK.
        uses: android-actions/setup-ndk@v1
        with:
          ndk-version: r28b # Updated NDK version

      - name: Checkout BoringSSL
        uses: actions/checkout@v4
        with:
          repository: 'google/boringssl'
          # As requested, we are checking out a specific tag.
          ref: '0.20250701.0'

      - name: Configure and Build BoringSSL
        # This step configures the build using CMake and then compiles with Ninja.
        #
        # NOTE: We are using CMake directly instead of the older 'generate_build_files.py'
        # script. This is the modern, recommended approach for BoringSSL and gives us
        # the necessary control to create minimal-size builds.
        #
        # -DANDROID_ABI: Specifies the target architecture from the matrix.
        # -DCMAKE_TOOLCHAIN_FILE: Points to the NDK's standard toolchain file.
        # -DANDROID_PLATFORM: Sets the minimum Android API level. '21' is a common choice.
        # -DCMAKE_C_FLAGS / -DCMAKE_CXX_FLAGS: Sets the C and C++ compiler flags for -O2 optimization.
        # -DBORINGSSL_BUILD_TESTS=OFF: Skips building tests to reduce size and build time.
        run: |
          cmake -B build -GNinja \
            -DANDROID_ABI=${{ matrix.arch }} \
            -DCMAKE_TOOLCHAIN_FILE=${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake \
            -DANDROID_PLATFORM=android-21 \
            -DCMAKE_C_FLAGS="-O2" \
            -DCMAKE_CXX_FLAGS="-O2" \
            -DBORINGSSL_BUILD_TESTS=OFF
          ninja -C build crypto ssl

      - name: Verify Library Size
        # This step checks if the final static library meets the size requirement.
        # The workflow will fail if the library is larger than 4MB.
        run: |
          set -e # Exit immediately if a command fails
          SIZE_BYTES=$(stat -c%s "build/crypto/libcrypto_static.a")
          MAX_SIZE_BYTES=$((4 * 1024 * 1024)) # 4MB in bytes

          echo "Checking size of build/crypto/libcrypto_static.a..."
          ls -lh build/crypto/libcrypto_static.a

          if [ "$SIZE_BYTES" -gt "$MAX_SIZE_BYTES" ]; then
            echo "Error: libcrypto_static.a is larger than 4MB (${SIZE_BYTES} bytes)."
            exit 1
          else
            echo "Size check passed. Library is ${SIZE_BYTES} bytes."
          fi

      - name: Prepare Artifacts
        # Create a directory to store the libraries and headers for easy uploading.
        run: |
          mkdir -p artifact/lib/${{ matrix.arch }}
          mkdir -p artifact/include
          cp build/crypto/libcrypto_static.a artifact/lib/${{ matrix.arch }}/
          cp build/ssl/libssl_static.a artifact/lib/${{ matrix.arch }}/
          cp -r include/* artifact/include/

      - name: Upload Build Artifact
        # This uploads the compiled libraries and headers. You can download them from
        # the "Summary" page of the completed workflow run.
        uses: actions/upload-artifact@v4
        with:
          name: boringssl-android-${{ matrix.arch }}
          path: artifact/

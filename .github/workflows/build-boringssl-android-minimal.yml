name: Build BoringSSL Android

on:
  workflow_dispatch:
    inputs:
      boringssl_ref:
        description: 'BoringSSL reference (tag/branch/commit)'
        required: true
        default: '0.20250701.0'
        type: string

jobs:
  build-boringssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout BoringSSL
      uses: actions/checkout@v4
      with:
        repository: google/boringssl
        ref: ${{ inputs.boringssl_ref || '0.20250701.0' }}
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r28b
        add-to-path: false
    
    - name: Set NDK environment
      run: |
        echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
        echo "NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build bc
    
    - name: Setup Go (required for BoringSSL build)
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Generate build files
      run: |
        # First run the general generator
        python3 util/generate_build_files.py
        
        # Then run for Android specifically
        python3 util/generate_build_files.py android
        
        # Verify files were generated
        ls -la src/gen/ || echo "src/gen directory not found, continuing..."
        ls -la . | grep -E "\.(mk|bp)$" || echo "No .mk or .bp files found, continuing..."
    
    - name: Create build directories
      run: |
        mkdir -p build/armeabi-v7a
        mkdir -p build/arm64-v8a
        mkdir -p build/x86
        mkdir -p build/x86_64
        mkdir -p output
    
    - name: Build for armeabi-v7a
      run: |
        cd build/armeabi-v7a
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DANDROID_ARM_NEON=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_armeabi-v7a.a
    
    - name: Build for arm64-v8a
      run: |
        cd build/arm64-v8a
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_arm64-v8a.a
    
    - name: Build for x86
      run: |
        cd build/x86
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=x86 \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_x86.a
    
    - name: Build for x86_64
      run: |
        cd build/x86_64
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=x86_64 \
          -DANDROID_NATIVE_API_LEVEL=21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG -ffunction-sections -fdata-sections -fvisibility=hidden -flto" \
          -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -flto" \
          -DCMAKE_STATIC_LINKER_FLAGS="-Wl,--gc-sections" \
          -DBUILD_SHARED_LIBS=OFF \
          -DOPENSSL_NO_ASM=OFF \
          ../..
        ninja crypto
        cp crypto/libcrypto.a ../../output/libcrypto_x86_64.a
    
    - name: Strip libraries and check sizes
      run: |
        cd output
        for lib in *.a; do
          echo "Original size of $lib:"
          ls -lh $lib
          
          # Find appropriate strip tool for each architecture
          case $lib in
            *armeabi-v7a*)
              STRIP_TOOL="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
              ;;
            *arm64-v8a*)
              STRIP_TOOL="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
              ;;
            *x86_64*)
              STRIP_TOOL="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
              ;;
            *x86*)
              STRIP_TOOL="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
              ;;
            *)
              STRIP_TOOL="strip"
              ;;
          esac
          
          if [ -f "$STRIP_TOOL" ]; then
            $STRIP_TOOL $lib
          else
            echo "Strip tool not found, using system strip"
            strip $lib 2>/dev/null || echo "Strip failed, continuing..."
          fi
          
          echo "Final size of $lib:"
          ls -lh $lib
          size_bytes=$(stat -c%s $lib)
          size_mb=$(echo "scale=2; $size_bytes/1024/1024" | bc -l)
          echo "Size: ${size_mb}MB (${size_bytes} bytes)"
          
          # Check if under 4MB
          if (( $(echo "$size_mb < 4.0" | bc -l) )); then
            echo "✅ $lib is under 4MB"
          else
            echo "⚠️  $lib is over 4MB"
          fi
          echo "---"
        done
    
    - name: Copy headers
      run: |
        mkdir -p output/include
        cp -r include/openssl output/include/
    
    - name: Create archive structure
      run: |
        cd output
        mkdir -p boringssl-android/{lib/{armeabi-v7a,arm64-v8a,x86,x86_64},include}
        
        # Copy libraries
        cp libcrypto_armeabi-v7a.a boringssl-android/lib/armeabi-v7a/libcrypto.a
        cp libcrypto_arm64-v8a.a boringssl-android/lib/arm64-v8a/libcrypto.a
        cp libcrypto_x86.a boringssl-android/lib/x86/libcrypto.a
        cp libcrypto_x86_64.a boringssl-android/lib/x86_64/libcrypto.a
        
        # Copy headers
        cp -r include/* boringssl-android/include/
        
        # Create CMakeLists.txt for easy integration
        cat > boringssl-android/CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.10)
        project(BoringSSL)
        
        # BoringSSL crypto library
        add_library(crypto STATIC IMPORTED)
        set_target_properties(crypto PROPERTIES
            IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/lib/${ANDROID_ABI}/libcrypto.a
            INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/include
        )
        
        # For compatibility, also create boringssl_crypto target
        add_library(boringssl_crypto ALIAS crypto)
        EOF
        
        # Create README
        cat > boringssl-android/README.md << 'EOF'
        # BoringSSL Android Build
        
        This package contains BoringSSL static libraries built for Android.
        
        ## Architectures
        - armeabi-v7a
        - arm64-v8a  
        - x86
        - x86_64
        
        ## Usage in CMake
        ```cmake
        add_subdirectory(path/to/boringssl-android)
        target_link_libraries(your_target crypto)
        ```
        
        ## Manual Usage
        Include path: `include/`
        Libraries: `lib/${ANDROID_ABI}/libcrypto.a`
        EOF
        
        # Create the archive
        tar -czf boringssl-android.tar.gz boringssl-android/
        
        echo "Archive created: boringssl-android.tar.gz"
        ls -lh boringssl-android.tar.gz
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boringssl-android-${{ inputs.boringssl_ref || '0.20250701.0' }}
        path: |
          output/boringssl-android.tar.gz
          output/libcrypto_*.a
        retention-days: 30
    
    - name: Display final summary
      run: |
        echo "=== BoringSSL Android Build Summary ==="
        echo "Reference: ${{ inputs.boringssl_ref || '0.20250701.0' }}"
        echo "NDK Version: r28b"
        echo "Optimization: -O2 with LTO"
        echo "Build Date: $(date)"
        echo ""
        echo "📦 Library sizes:"
        cd output
        total_size=0
        for lib in libcrypto_*.a; do
          if [ -f "$lib" ]; then
            size_bytes=$(stat -c%s $lib)
            size_mb=$(echo "scale=2; $size_bytes/1024/1024" | bc -l)
            total_size=$(echo "$total_size + $size_bytes" | bc -l)
            arch=$(echo $lib | sed 's/libcrypto_\(.*\)\.a/\1/')
            printf "%-15s: %6.2fMB (%d bytes)\n" "$arch" "$size_mb" "$size_bytes"
          fi
        done
        
        total_mb=$(echo "scale=2; $total_size/1024/1024" | bc -l)
        echo ""
        echo "📊 Total size: ${total_mb}MB"
        echo ""
        echo "✅ Build completed successfully!"
        echo "📁 Download the 'boringssl-android-${{ inputs.boringssl_ref || '0.20250701.0' }}' artifact"

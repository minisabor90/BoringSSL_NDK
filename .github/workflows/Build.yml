name: Build BoringSSL for Android

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-boringssl:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        arch: [armeabi-v7a, arm64-v8a, x86, x86_64]
    
    steps:
    - name: Checkout BoringSSL release 0.20250701.0
      uses: actions/checkout@v4
      with:
        repository: google/boringssl
        ref: 0.20250701.0
        path: boringssl
        submodules: recursive
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b
        add-to-path: false
        
    - name: Setup CMake and Ninja
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
        
        # Verify installations
        echo "CMake version:"
        cmake --version
        echo "Ninja version:"
        ninja --version
        echo "Ninja path:"
        which ninja
        
    - name: Verify NDK setup
      run: |
        echo "NDK path from setup-ndk: ${{ steps.setup-ndk.outputs.ndk-path }}"
        echo "Checking NDK directory:"
        ls -la "${{ steps.setup-ndk.outputs.ndk-path }}" || echo "NDK path not accessible"
        echo "Checking for toolchain file:"
        ls -la "${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake" || echo "Toolchain file not found"
        
    - name: Verify BoringSSL checkout and find x509_def.cc
      run: |
        cd boringssl
        echo "Current tag/commit:"
        git describe --tags --always
        echo "Commit hash:"
        git rev-parse HEAD
        echo "Checking submodules:"
        git submodule status
        echo ""
        echo "Finding x509_def.cc file:"
        find . -name "x509_def.cc" -type f
        echo ""
        echo "Exploring crypto/x509 directory structure:"
        find . -path "*/crypto/x509*" -name "*.cc" | head -10
        echo ""
        echo "Looking for X509_CERT_DIR references:"
        grep -r "X509_CERT_DIR" . --include="*.cc" --include="*.c" || echo "No X509_CERT_DIR found in .cc/.c files"
        
    - name: Apply Android cacerts patch
      run: |
        cd boringssl
        
        # Find the correct x509_def.cc file
        X509_DEF_FILE=$(find . -name "x509_def.cc" -type f | head -1)
        
        if [ -z "$X509_DEF_FILE" ]; then
          echo "x509_def.cc not found, looking for alternative files with X509_CERT_DIR"
          X509_DEF_FILE=$(grep -r "X509_CERT_DIR" . --include="*.cc" --include="*.c" -l | head -1)
        fi
        
        if [ -n "$X509_DEF_FILE" ]; then
          echo "Found target file: $X509_DEF_FILE"
          echo "Before patch:"
          grep -n "X509_CERT_DIR" "$X509_DEF_FILE" || echo "X509_CERT_DIR pattern not found"
          
          # Apply the patch
          sed -i 's|return X509_CERT_DIR;|return "/system/etc/security/cacerts";|g' "$X509_DEF_FILE"
          
          echo "After patch:"
          grep -n "return \"/system/etc/security/cacerts\";" "$X509_DEF_FILE" || echo "Patch not applied"
          
          # Also show context around the change
          echo "Context around the change:"
          grep -B2 -A2 "return \"/system/etc/security/cacerts\";" "$X509_DEF_FILE" || echo "No context found"
        else
          echo "WARNING: Could not find file containing X509_CERT_DIR - continuing without patch"
          echo "Available files in crypto directory:"
          find . -path "*/crypto/*" -name "*.cc" | head -20
        fi
        
    - name: Configure build variables
      run: |
        NDK_PATH="${{ steps.setup-ndk.outputs.ndk-path }}"
        
        if [ -z "$NDK_PATH" ] || [ ! -d "$NDK_PATH" ]; then
          echo "ERROR: NDK path is empty or doesn't exist"
          echo "Trying to find NDK in common locations..."
          
          # Try common NDK locations
          for ndk_dir in /usr/local/lib/android/sdk/ndk/* $ANDROID_HOME/ndk/* $ANDROID_NDK_ROOT; do
            if [ -d "$ndk_dir" ] && [ -f "$ndk_dir/build/cmake/android.toolchain.cmake" ]; then
              NDK_PATH="$ndk_dir"
              echo "Found NDK at: $NDK_PATH"
              break
            fi
          done
          
          if [ -z "$NDK_PATH" ]; then
            echo "ERROR: Could not find NDK installation"
            exit 1
          fi
        fi
        
        echo "Using NDK path: $NDK_PATH"
        echo "NDK_ROOT=$NDK_PATH" >> $GITHUB_ENV
        
        case "${{ matrix.arch }}" in
          armeabi-v7a)
            echo "ANDROID_ABI=armeabi-v7a" >> $GITHUB_ENV
            echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
            ;;
          arm64-v8a)
            echo "ANDROID_ABI=arm64-v8a" >> $GITHUB_ENV
            echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
            ;;
          x86)
            echo "ANDROID_ABI=x86" >> $GITHUB_ENV
            echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
            ;;
          x86_64)
            echo "ANDROID_ABI=x86_64" >> $GITHUB_ENV
            echo "ANDROID_PLATFORM=android-21" >> $GITHUB_ENV
            ;;
        esac
        
        echo "CMAKE_TOOLCHAIN_FILE=$NDK_PATH/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
        
        # Verify the toolchain file exists
        if [ ! -f "$NDK_PATH/build/cmake/android.toolchain.cmake" ]; then
          echo "ERROR: Android toolchain file not found at $NDK_PATH/build/cmake/android.toolchain.cmake"
          exit 1
        fi
        
        echo "Toolchain file verified: $NDK_PATH/build/cmake/android.toolchain.cmake"
        
    - name: Create build directory
      run: |
        mkdir -p boringssl/build-${{ matrix.arch }}
        
    - name: Configure CMake
      run: |
        cd boringssl/build-${{ matrix.arch }}
        
        echo "=== CMake Configuration ==="
        echo "Architecture: ${{ matrix.arch }}"
        echo "NDK Root: $NDK_ROOT"
        echo "Android ABI: $ANDROID_ABI"
        echo "Android Platform: $ANDROID_PLATFORM"
        echo "Toolchain File: $CMAKE_TOOLCHAIN_FILE"
        echo "Ninja path: $(which ninja)"
        
        # Verify all required variables are set
        if [ -z "$NDK_ROOT" ] || [ -z "$ANDROID_ABI" ] || [ -z "$CMAKE_TOOLCHAIN_FILE" ]; then
          echo "ERROR: Required environment variables not set"
          echo "NDK_ROOT: $NDK_ROOT"
          echo "ANDROID_ABI: $ANDROID_ABI"
          echo "CMAKE_TOOLCHAIN_FILE: $CMAKE_TOOLCHAIN_FILE"
          exit 1
        fi
        
        cmake .. \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE" \
          -DANDROID_ABI="$ANDROID_ABI" \
          -DANDROID_PLATFORM="$ANDROID_PLATFORM" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_FLAGS="-O2 -DNDEBUG" \
          -DCMAKE_CXX_FLAGS="-O2 -DNDEBUG" \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DANDROID_STL=c++_static \
          -DCMAKE_MAKE_PROGRAM="$(which ninja)"
          
    - name: Build BoringSSL
      run: |
        cd boringssl/build-${{ matrix.arch }}
        
        echo "=== Starting Build ==="
        echo "Build directory contents:"
        ls -la
        
        echo "Running ninja build..."
        ninja -v
        
    - name: Verify build output
      run: |
        cd boringssl/build-${{ matrix.arch }}
        echo "Build completed for ${{ matrix.arch }}"
        
        echo "=== Build Output Verification ==="
        echo "SSL library:"
        if [ -f ssl/libssl.a ]; then
          ls -la ssl/libssl.a
          file ssl/libssl.a
        else
          echo "ERROR: libssl.a not found"
          find . -name "libssl*" -type f
        fi
        
        echo "Crypto library:"
        if [ -f crypto/libcrypto.a ]; then
          ls -la crypto/libcrypto.a
          file crypto/libcrypto.a
        else
          echo "ERROR: libcrypto.a not found"
          find . -name "libcrypto*" -type f
        fi
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/${{ matrix.arch }}/lib
        mkdir -p artifacts/${{ matrix.arch }}/include
        
        # Copy static libraries
        cp boringssl/build-${{ matrix.arch }}/ssl/libssl.a artifacts/${{ matrix.arch }}/lib/
        cp boringssl/build-${{ matrix.arch }}/crypto/libcrypto.a artifacts/${{ matrix.arch }}/lib/
        
        # Copy headers
        cp -r boringssl/include/* artifacts/${{ matrix.arch }}/include/
        
        # Show artifact sizes
        echo "Artifact sizes for ${{ matrix.arch }}:"
        ls -lah artifacts/${{ matrix.arch }}/lib/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: boringssl-android-${{ matrix.arch }}
        path: artifacts/${{ matrix.arch }}
        retention-days: 30

  package-release:
    needs: build-boringssl
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Package all architectures
      run: |
        mkdir -p boringssl-android-release
        
        for arch in armeabi-v7a arm64-v8a x86 x86_64; do
          mkdir -p boringssl-android-release/$arch
          cp -r boringssl-android-$arch/* boringssl-android-release/$arch/
        done
        
        # Create a unified include directory (same for all architectures)
        cp -r boringssl-android-release/arm64-v8a/include boringssl-android-release/
        
        # Show final structure and sizes
        echo "Final package structure:"
        find boringssl-android-release -type f -name "*.a" -exec ls -lah {} \;
        
        # Create README
        cat > boringssl-android-release/README.md << 'EOF'
        # BoringSSL Android Build (Release 0.20250701.0)
        
        This package contains BoringSSL static libraries built for Android with the following modifications:
        - X509_CERT_DIR points to "/system/etc/security/cacerts" (if applicable)
        - Built from BoringSSL release: 0.20250701.0 (commit f3dcc46)
        - Built with Android NDK r28b
        - Optimized with -O2 -DNDEBUG
        - Static C++ STL linking
        
        ## Architecture Support
        - armeabi-v7a (32-bit ARM)
        - arm64-v8a (64-bit ARM)
        - x86 (32-bit Intel)
        - x86_64 (64-bit Intel)
        
        ## Usage in Android Project
        
        ### CMakeLists.txt
        ```cmake
        cmake_minimum_required(VERSION 3.18.1)
        project("your_app")
        
        # Set BoringSSL path
        set(BORINGSSL_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../../../boringssl-android)
        
        # Import BoringSSL libraries
        add_library(ssl STATIC IMPORTED)
        set_target_properties(ssl PROPERTIES
            IMPORTED_LOCATION ${BORINGSSL_ROOT}/${ANDROID_ABI}/lib/libssl.a
        )
        
        add_library(crypto STATIC IMPORTED)
        set_target_properties(crypto PROPERTIES
            IMPORTED_LOCATION ${BORINGSSL_ROOT}/${ANDROID_ABI}/lib/libcrypto.a
        )
        
        # Your native library
        add_library(your_app SHARED native-lib.cpp)
        
        # Include directories and link libraries
        target_include_directories(your_app PRIVATE ${BORINGSSL_ROOT}/include)
        target_link_libraries(your_app ssl crypto log)
        ```
        
        ### build.gradle (Module: app)
        ```gradle
        android {
            ndkVersion "28.1.13356709"
            compileSdk 34
            
            defaultConfig {
                minSdk 21
                targetSdk 34
                
                ndk {
                    abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                }
            }
            
            externalNativeBuild {
                cmake {
                    path "src/main/cpp/CMakeLists.txt"
                    version "3.18.1"
                }
            }
        }
        ```
        EOF
        
        # Create build info
        cat > boringssl-android-release/BUILD_INFO.txt << EOF
        Build Date: $(date)
        BoringSSL Release: 0.20250701.0
        BoringSSL Commit: f3dcc4660d30c35b1ccc40149a8cc170dc539132
        NDK Version: r28b (28.1.13356709)
        Architectures: armeabi-v7a, arm64-v8a, x86, x86_64
        Optimization: -O2 -DNDEBUG
        Build Type: Release
        STL: c++_static
        
        Library Sizes:
        EOF
        
        # Add library sizes to build info
        for arch in armeabi-v7a arm64-v8a x86 x86_64; do
          echo "$arch:" >> boringssl-android-release/BUILD_INFO.txt
          ls -lah boringssl-android-release/$arch/lib/ >> boringssl-android-release/BUILD_INFO.txt
          echo "" >> boringssl-android-release/BUILD_INFO.txt
        done
        
        # Create compressed archive
        tar -czf boringssl-android-release.tar.gz boringssl-android-release/
        
        # Show final archive info
        echo "Final archive:"
        ls -lah boringssl-android-release.tar.gz
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: boringssl-0.20250701.0-android-${{ github.run_number }}
        name: BoringSSL 0.20250701.0 Android Build ${{ github.run_number }}
        body: |
          BoringSSL static libraries built for Android from release **0.20250701.0**
          
          **Build Details:**
          - BoringSSL release: 0.20250701.0
          - Commit hash: f3dcc4660d30c35b1ccc40149a8cc170dc539132
          - Android NDK: r28b (28.1.13356709)
          - Optimization: -O2 -DNDEBUG
          - STL: c++_static (statically linked)
          
          **Architectures:**
          - ✅ armeabi-v7a (32-bit ARM)
          - ✅ arm64-v8a (64-bit ARM) 
          - ✅ x86 (32-bit Intel)
          - ✅ x86_64 (64-bit Intel)
          
          Ready to use in your Android NDK project! 🚀
        files: |
          boringssl-android-release.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
